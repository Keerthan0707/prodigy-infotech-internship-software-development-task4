def print_grid(grid):
    """Function to print the Sudoku grid."""
    for row in grid:
        print(" ".join(str(num) if num != 0 else '.' for num in row))

def is_valid(grid, row, col, num):
    """Function to check if placing num at grid[row][col] is valid."""
    # Check if num is not in the current row
    if num in grid[row]:
        return False

    # Check if num is not in the current column
    if num in (grid[r][col] for r in range(9)):
        return False

    # Check if num is not in the current 3x3 sub-grid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for r in range(start_row, start_row + 3):
        for c in range(start_col, start_col + 3):
            if grid[r][c] == num:
                return False

    return True

def find_empty_location(grid):
    """Function to find an empty cell in the grid. Returns (row, col) or None if no empty cells are found."""
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                return (row, col)
    return None

def solve_sudoku(grid):
    """Function to solve the Sudoku puzzle using backtracking."""
    empty_loc = find_empty_location(grid)
    if not empty_loc:
        return True  # No empty cell found, puzzle solved

    row, col = empty_loc

    for num in range(1, 10):  # Numbers from 1 to 9
        if is_valid(grid, row, col, num):
            grid[row][col] = num

            if solve_sudoku(grid):
                return True  # If placing num leads to a solution, return True

            grid[row][col] = 0  # Backtrack

    return False  # Trigger backtracking

def get_sudoku_input():
    """Function to read Sudoku grid input from the user."""
    print("Enter the Sudoku puzzle row by row, use 0 for empty cells:")
    grid = []
    for i in range(9):
        while True:
            try:
                row = list(map(int, input(f"Enter row {i + 1} (9 numbers separated by space): ").split()))
                if len(row) != 9:
                    raise ValueError("Each row must contain exactly 9 numbers.")
                grid.append(row)
                break
            except ValueError as e:
                print(f"Invalid input. Please try again. ({e})")
    return grid

# Main program
if __name__ == "__main__":
    sudoku_grid = get_sudoku_input()

    print("\nSudoku puzzle before solving:")
    print_grid(sudoku_grid)

    if solve_sudoku(sudoku_grid):
        print("\nSudoku puzzle after solving:")
        print_grid(sudoku_grid)
    else:
        print("No solution exists")
